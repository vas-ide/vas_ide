Ex10: Тест на короткую фразу

В рамках этой задачи с помощью pytest необходимо написать тест, который просит ввести в консоли любую фразу короче 15 символов. А затем с помощью assert проверяет, что фраза действительно короче 15 символов.

Чтобы в переменную получить значение, введенное из консоли, необходимо написать вот такой код:
phrase = input("Set a phrase: ")

Внимание, чтобы pytest не игнорировал команду ввода с клавиатуры, запускать тест нужно с ключиком "-s": python -m pytest -s my_test.py

=========================================

Результатом должна стать ссылка на такой тест.




Ex11: Тест запроса на метод cookie

Необходимо написать тест, который делает запрос на метод: https://playground.learnqa.ru/api/homework_cookie
Этот метод возвращает какую-то cookie с каким-то значением. Необходимо с помощью функции print() понять что за cookie и с каким значением, и зафиксировать это поведение с помощью assert

Чтобы pytest не игнорировал print() необходимо использовать ключик "-s": python -m pytest -s my_test.py

=================================================
Результатом должна быть ссылка на коммит с тестом.




Ex12: Тест запроса на метод header

Необходимо написать тест, который делает запрос на метод: https://playground.learnqa.ru/api/homework_header
Этот метод возвращает headers с каким-то значением. Необходимо с помощью функции print() понять что за headers и с каким значением, и зафиксировать это поведение с помощью assert

Чтобы pytest не игнорировал print() необходимо использовать ключик "-s": python -m pytest -s my_test.py

=============================================================
Результатом должна быть ссылка на коммит с тестом.




Ex13: User Agent

User Agent - это один из заголовков, позволяющий серверу узнавать, с какого девайса и браузера пришел запрос. 
Он формируется автоматически клиентом, например браузером. 
Определив, с какого девайса или браузера пришел к нам пользователь мы сможем отдать ему только тот контент, который ему нужен.

Наш разработчик написал метод: https://playground.learnqa.ru/ajax/api/user_agent_check
Метод определяет по строке заголовка User Agent следующие параметры:

device - iOS или Android

browser - Chrome, Firefox или другой браузер

platform - мобильное приложение или веб

Если метод не может определить какой-то из параметров, он выставляет значение Unknown.

Наша задача написать параметризированный тест. Этот тест должен брать из дата-провайдера User Agent и ожидаемые значения, GET-делать запрос с этим User Agent и убеждаться, что результат работы нашего метода правильный - т.е. в ответе ожидаемое значение всех трех полей.

Список User Agent и ожидаемых значений можно найти по этой ссылке: https://gist.github.com/KotovVitaliy/138894aa5b6fa442163561b5db6e2e26

Пример того, как должен выглядеть запрос с указанным User Agent:

requests.get(

    "https://playground.learnqa.ru/ajax/api/user_agent_check",

    headers={"User-Agent": "Some value here"}

)

============================================================
На самом деле метод не всегда работает правильно. Ответом к задаче должен быть список из тех User Agent, которые вернули неправильным хотя бы один параметр, с указанием того, какой именно параметр неправильный.
И, конечно, ссылка на коммит с вашим тестом.




Ex14: Формирование фреймворка

На этом уроке мы начали создавать свой фреймворк. 
Он нам пригодится в дальнейшим, так как домашние задания следующего урока будут опираться на методы из этого фреймворка.

Потом эта задача в том, чтобы повторить то, что мы проделали на уроке:

- создать класс BaseCase в директории lib/

- создать класс Assertions в директории lib/

- создать тест TestUserAuth в директории tests/ 

===========================================================================
Результатом работы должна быть ссылка на репозиторий, куда выложены эти классы.